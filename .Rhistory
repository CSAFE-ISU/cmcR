iters = 150) %>%
preProcess_levelBF() %>%
preProcess_ransac(inlierThreshold = (1e-6),
finalSelectionThreshold = 2*(1e-5),
iters = 300) %>%
preProcess_levelBF()  %>%
preProcess_cropWS() %>%
preProcess_removeFPCircle()  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = c(16),
filtertype = "lp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
km1_residuals$header.info$sizeY <- ncol(km1_residuals$surface.matrix)
km1_residuals$header.info$sizeX <- nrow(km1_residuals$surface.matrix)
cmcR::x3pListPlot(list("Known Match 1" = km1_residuals))
km1_residuals$surface.matrix <- km1_residuals$surface.matrix %>%
preProcess_ransac(inlierThreshold = 1e-5,
finalSelectionThreshold = 2*(1e-5),
iters = 150) %>%
preProcess_levelBF() %>%
preProcess_ransac(inlierThreshold = (1e-6),
finalSelectionThreshold = 2*(1e-5),
iters = 300) %>%
preProcess_levelBF()  %>%
preProcess_cropWS() %>%
preProcess_removeFPCircle()  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = c(250),
filtertype = "hp")
set.seed(4132020) #RANSAC method is based on randomly sampling points in matrix
km1_residuals <- km1_raw %>%
x3ptools::sample_x3p(m = 2) #down-sampled copy of km1_raw
km1_residuals$surface.matrix <- km1_residuals$surface.matrix %>%
preProcess_ransac(inlierThreshold = 1e-5,
finalSelectionThreshold = 2*(1e-5),
iters = 150) %>%
preProcess_levelBF() %>%
preProcess_ransac(inlierThreshold = (1e-6),
finalSelectionThreshold = 2*(1e-5),
iters = 300) %>%
preProcess_levelBF()  %>%
preProcess_cropWS() %>%
preProcess_removeFPCircle()  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = c(250),
filtertype = "hp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
km1_residuals$header.info$sizeY <- ncol(km1_residuals$surface.matrix)
km1_residuals$header.info$sizeX <- nrow(km1_residuals$surface.matrix)
cmcR::x3pListPlot(list("Known Match 1" = km1_residuals))
rm(dat)
cmcR::x3pListPlot(list("Known Match 1" = km1_residuals))
cmcR::x3pListPlot(list("Known Match 1" = km2_residuals))
cmcR::x3pListPlot(list("Known Match 1" = km2_residuals$x3p))
library(cmcR)
library(magrittr)
library(ggplot2)
library(dplyr)
km2_residuals <- selectBFImpression_sample_x3p(x3p_path = "https://tsapps.nist.gov/NRBTD/Studies/CartridgeMeasurement/DownloadMeasurement/cb296c98-39f5-46eb-abff-320a2f5568e8"),
km2_residuals <- selectBFImpression_sample_x3p(x3p_path = "https://tsapps.nist.gov/NRBTD/Studies/CartridgeMeasurement/DownloadMeasurement/cb296c98-39f5-46eb-abff-320a2f5568e8")
cmcR::x3pListPlot(list("Known Match 1" = km2_residuals$x3p))
library(cmcR)
devtools::document()
rlang::last_error()
rlang::last_trace()
devtools::document()
devtools::document()
devtools::install_github("https://github.com/xhtai/cartridges3D")
devtools::document()
library(cmcR)
library(magrittr)
library(ggplot2)
library(dplyr)
#Sys.sleep since hitting the database too quickly will cause an error
km1_raw <- x3ptools::read_x3p("https://tsapps.nist.gov/NRBTD/Studies/CartridgeMeasurement/DownloadMeasurement/2d9cc51f-6f66-40a0-973a-a9292dbee36d")
Sys.sleep(5)
km2_raw <- x3ptools::read_x3p("https://tsapps.nist.gov/NRBTD/Studies/CartridgeMeasurement/DownloadMeasurement/cb296c98-39f5-46eb-abff-320a2f5568e8")
Sys.sleep(5)
unknown1_raw <- x3ptools::read_x3p("https://tsapps.nist.gov/NRBTD/Studies/CartridgeMeasurement/DownloadMeasurement/8ae0b86d-210a-41fd-ad75-8212f9522f96")
Sys.sleep(5)
unknown2_raw <- x3ptools::read_x3p("https://tsapps.nist.gov/NRBTD/Studies/CartridgeMeasurement/DownloadMeasurement/9a054edf-f648-40a5-a061-b05ad036c61e")
cmcR::x3pListPlot(list("Known Match 1" = km1_raw,
"Known Match 2" = km2_raw,
"Unknown Source 1" = unknown1_raw,
"Unknown Source 2" = unknown2_raw))
set.seed(4132020) #RANSAC method is based on randomly sampling points in matrix
km1_residuals <- km1_raw %>%
x3ptools::sample_x3p(m = 2) #down-sampled copy of km1_raw
km1_residuals$surface.matrix <- km1_residuals$surface.matrix %>%
preProcess_ransac(inlierThreshold = 1e-5,
finalSelectionThreshold = 2*(1e-5),
iters = 150) %>%
preProcess_levelBF() %>%
preProcess_ransac(inlierThreshold = (1e-6),
finalSelectionThreshold = 2*(1e-5),
iters = 300) %>%
preProcess_levelBF()  %>%
preProcess_cropWS() %>%
preProcess_removeFPCircle()  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = c(16,250),
filtertype = "bp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
km1_residuals$header.info$sizeY <- ncol(km1_residuals$surface.matrix)
km1_residuals$header.info$sizeX <- nrow(km1_residuals$surface.matrix)
x3pListPlot(list(km1_residuals))
for(high in c(250,300,350,400,450)){
km1_residuals <- km1_raw %>%
x3ptools::sample_x3p(m = 2) #down-sampled copy of km1_raw
km1_residuals$surface.matrix <- km1_residuals$surface.matrix %>%
preProcess_ransac(inlierThreshold = 1e-5,
finalSelectionThreshold = 2*(1e-5),
iters = 150) %>%
preProcess_levelBF() %>%
preProcess_ransac(inlierThreshold = (1e-6),
finalSelectionThreshold = 2*(1e-5),
iters = 300) %>%
preProcess_levelBF()  %>%
preProcess_cropWS() %>%
preProcess_removeFPCircle()  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = c(16,high),
filtertype = "bp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
km1_residuals$header.info$sizeY <- ncol(km1_residuals$surface.matrix)
km1_residuals$header.info$sizeX <- nrow(km1_residuals$surface.matrix)
x3pListPlot(list(km1_residuals))
}
l <- list()
for(high in c(250,300,350,400,450)){
km1_residuals <- km1_raw %>%
x3ptools::sample_x3p(m = 2) #down-sampled copy of km1_raw
km1_residuals$surface.matrix <- km1_residuals$surface.matrix %>%
preProcess_ransac(inlierThreshold = 1e-5,
finalSelectionThreshold = 2*(1e-5),
iters = 150) %>%
preProcess_levelBF() %>%
preProcess_ransac(inlierThreshold = (1e-6),
finalSelectionThreshold = 2*(1e-5),
iters = 300) %>%
preProcess_levelBF()  %>%
preProcess_cropWS() %>%
preProcess_removeFPCircle()  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = c(16,high),
filtertype = "bp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
km1_residuals$header.info$sizeY <- ncol(km1_residuals$surface.matrix)
km1_residuals$header.info$sizeX <- nrow(km1_residuals$surface.matrix)
l <- x3pListPlot(list(km1_residuals))
}
l <- list()
for(high in c(250,300,350,400,450)){
km1_residuals <- km1_raw %>%
x3ptools::sample_x3p(m = 2) #down-sampled copy of km1_raw
km1_residuals$surface.matrix <- km1_residuals$surface.matrix %>%
preProcess_ransac(inlierThreshold = 1e-5,
finalSelectionThreshold = 2*(1e-5),
iters = 150) %>%
preProcess_levelBF() %>%
preProcess_ransac(inlierThreshold = (1e-6),
finalSelectionThreshold = 2*(1e-5),
iters = 300) %>%
preProcess_levelBF()  %>%
preProcess_cropWS() %>%
preProcess_removeFPCircle()  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = c(16,high),
filtertype = "bp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
km1_residuals$header.info$sizeY <- ncol(km1_residuals$surface.matrix)
km1_residuals$header.info$sizeX <- nrow(km1_residuals$surface.matrix)
l <- list(l,x3pListPlot(list(km1_residuals)))
}
l
l <- list()
km1_residuals <- km1_raw %>%
x3ptools::sample_x3p(m = 2) #down-sampled copy of km1_raw
km1_residuals$surface.matrix <- km1_residuals$surface.matrix %>%
preProcess_ransac(inlierThreshold = 1e-5,
finalSelectionThreshold = 2*(1e-5),
iters = 150) %>%
preProcess_levelBF() %>%
preProcess_ransac(inlierThreshold = (1e-6),
finalSelectionThreshold = 2*(1e-5),
iters = 300) %>%
preProcess_levelBF()  %>%
preProcess_cropWS() %>%
preProcess_removeFPCircle()
for(high in c(250,300,350,400,450)){
km1_residuals$surface.matrix <- km1_residuals$surface.matrix  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = c(16,high),
filtertype = "bp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
km1_residuals$header.info$sizeY <- ncol(km1_residuals$surface.matrix)
km1_residuals$header.info$sizeX <- nrow(km1_residuals$surface.matrix)
l <- list(l,x3pListPlot(list(km1_residuals)))
}
l
l <- list()
km1_residuals <- km1_raw %>%
x3ptools::sample_x3p(m = 2) #down-sampled copy of km1_raw
km1_residuals$surface.matrix <- km1_residuals$surface.matrix %>%
preProcess_ransac(inlierThreshold = 1e-5,
finalSelectionThreshold = 2*(1e-5),
iters = 150) %>%
preProcess_levelBF() %>%
preProcess_ransac(inlierThreshold = (1e-6),
finalSelectionThreshold = 2*(1e-5),
iters = 300) %>%
preProcess_levelBF()  %>%
preProcess_cropWS() %>%
preProcess_removeFPCircle()
for(high in c(250,300,350,400,450,500,550,600,650,700)){
tmp <- km1_residuals
tmp$surface.matrix <- km1_residuals$surface.matrix  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = c(16,high),
filtertype = "bp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
tmp$header.info$sizeY <- ncol(tmp$surface.matrix)
tmp$header.info$sizeX <- nrow(tmp$surface.matrix)
l <- list(l,x3pListPlot(list(tmp)))
}
l
l <- list()
for(high in c(250,300,350,400,450,500,550,600,650,700.750,800.850)){
tmp <- km1_residuals
tmp$surface.matrix <- km1_residuals$surface.matrix  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = c(16,high),
filtertype = "bp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
tmp$header.info$sizeY <- ncol(tmp$surface.matrix)
tmp$header.info$sizeX <- nrow(tmp$surface.matrix)
l <- list(l,x3pListPlot(list(tmp)))
}
l
l <- list(l,x3pListPlot(km1_residuals))
km1_residuals$header.info$sizeY <- ncol(tmp$surface.matrix)
km1_residuals$header.info$sizeX <- nrow(tmp$surface.matrix)
km1_residuals$header.info$sizeY <- ncol(km1_residuals$surface.matrix)
km1_residuals$header.info$sizeX <- nrow(km1_residuals$surface.matrix)
l <- list(l,x3pListPlot(km1_residuals))
l <- append(l,x3pListPlot(list(km1_residuals)))
l
x3pListPlot(list(km1_residuals)))
x3pListPlot(list(km1_residuals))
append(1,2)
ind <- 1
for(high in seq(250,1000,by = 50)){
tmp <- km1_residuals
tmp$surface.matrix <- km1_residuals$surface.matrix  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = c(16,high),
filtertype = "bp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
tmp$header.info$sizeY <- ncol(tmp$surface.matrix)
tmp$header.info$sizeX <- nrow(tmp$surface.matrix)
l[[i]] <- x3pListPlot(list(tmp))
}
ind <- 1
for(high in seq(250,1000,by = 50)){
tmp <- km1_residuals
tmp$surface.matrix <- km1_residuals$surface.matrix  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = c(16,high),
filtertype = "bp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
tmp$header.info$sizeY <- ncol(tmp$surface.matrix)
tmp$header.info$sizeX <- nrow(tmp$surface.matrix)
l[[ind]] <- x3pListPlot(list(tmp))
ind <- ind + 1
}
km1_residuals$header.info$sizeY <- ncol(km1_residuals$surface.matrix)
km1_residuals$header.info$sizeX <- nrow(km1_residuals$surface.matrix)
l[[length(seq(250,1000,by = 50))]] <- x3pListPlot(list(km1_residuals))
l
l %>%
purrr::map(plot)
l
km1_residuals <- km1_raw %>%
x3ptools::sample_x3p(m = 2) #down-sampled copy of km1_raw
km1_residuals$surface.matrix <- km1_residuals$surface.matrix %>%
preProcess_ransac(inlierThreshold = 1e-5,
finalSelectionThreshold = 2*(1e-5),
iters = 150) %>%
preProcess_levelBF() %>%
preProcess_ransac(inlierThreshold = (1e-6),
finalSelectionThreshold = 2*(1e-5),
iters = 300) %>%
preProcess_levelBF()  %>%
preProcess_cropWS() %>%
preProcess_removeFPCircle()
ind <- 1
for(high in seq(250,2000,by = 50)){
tmp <- km1_residuals
tmp$surface.matrix <- km1_residuals$surface.matrix  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = c(16,high),
filtertype = "bp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
tmp$header.info$sizeY <- ncol(tmp$surface.matrix)
tmp$header.info$sizeX <- nrow(tmp$surface.matrix)
l[[ind]] <- x3pListPlot(list(tmp))
ind <- ind + 1
}
l[[length(seq(250,2000,by = 50))]] <- x3pListPlot(list(km1_residuals))
l
km1_residuals <- km1_raw %>%
x3ptools::sample_x3p(m = 2) #down-sampled copy of km1_raw
km1_residuals$surface.matrix <- km1_residuals$surface.matrix %>%
preProcess_ransac(inlierThreshold = 1e-5,
finalSelectionThreshold = 2*(1e-5),
iters = 150) %>%
preProcess_levelBF() %>%
preProcess_ransac(inlierThreshold = (1e-6),
finalSelectionThreshold = 2*(1e-5),
iters = 300) %>%
preProcess_levelBF()  %>%
preProcess_cropWS() %>%
preProcess_removeFPCircle()
library(cmcR)
library(magrittr)
library(ggplot2)
library(dplyr)
km1_residuals <- km1_raw %>%
x3ptools::sample_x3p(m = 2) #down-sampled copy of km1_raw
km1_residuals$surface.matrix <- km1_residuals$surface.matrix %>%
preProcess_ransac(inlierThreshold = 1e-5,
finalSelectionThreshold = 2*(1e-5),
iters = 150) %>%
preProcess_levelBF() %>%
preProcess_ransac(inlierThreshold = (1e-6),
finalSelectionThreshold = 2*(1e-5),
iters = 300) %>%
preProcess_levelBF()  %>%
preProcess_cropWS() %>%
preProcess_removeFPCircle()
km1_residuals$header.info$sizeY <- ncol(km1_residuals$surface.matrix)
km1_residuals$header.info$sizeX <- nrow(km1_residuals$surface.matrix)
ind <- 1
for(high in seq(250,2000,by = 50)){
tmp <- km1_residuals
tmp$surface.matrix <- km1_residuals$surface.matrix  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = c(16,high),
filtertype = "bp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
tmp$header.info$sizeY <- ncol(tmp$surface.matrix)
tmp$header.info$sizeX <- nrow(tmp$surface.matrix)
l[[ind]] <- x3pListPlot(list(tmp))
ind <- ind + 1
}
l[[length(seq(250,2000,by = 50))]] <- x3pListPlot(list(km1_residuals))
l
seq(0,1,by = .1)
library(cmcR)
library(magrittr)
library(ggplot2)
library(dplyr)
l[[length(seq(250,2000,by = 50))]] <- x3pListPlot(list(km1_residuals))
l[[length(seq(250,2000,by = 50))]]
ind <- 1
for(high in seq(250,2000,by = 50)){
tmp <- km1_residuals
tmp$surface.matrix <- km1_residuals$surface.matrix  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = c(16,high),
filtertype = "bp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
tmp$header.info$sizeY <- ncol(tmp$surface.matrix)
tmp$header.info$sizeX <- nrow(tmp$surface.matrix)
l[[ind]] <- x3pListPlot(list(tmp))
ind <- ind + 1
}
l[[length(seq(250,2000,by = 50))]] <- x3pListPlot(list(km1_residuals))
l
library(cmcR)
library(magrittr)
library(ggplot2)
library(dplyr)
ind <- 1
for(high in seq(250,2000,by = 50)){
tmp <- km1_residuals
tmp$surface.matrix <- km1_residuals$surface.matrix  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = c(16,high),
filtertype = "bp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
tmp$header.info$sizeY <- ncol(tmp$surface.matrix)
tmp$header.info$sizeX <- nrow(tmp$surface.matrix)
l[[ind]] <- x3pListPlot(list(tmp))
ind <- ind + 1
}
l[[length(seq(250,2000,by = 50))]] <- x3pListPlot(list(km1_residuals))
l
ind <- 1
for(high in seq(250,5000,by = 50)){
tmp <- km1_residuals
tmp$surface.matrix <- km1_residuals$surface.matrix  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = high,
filtertype = "hp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
tmp$header.info$sizeY <- ncol(tmp$surface.matrix)
tmp$header.info$sizeX <- nrow(tmp$surface.matrix)
l[[ind]] <- x3pListPlot(list(tmp))
ind <- ind + 1
}
l[[length(seq(250,5000,by = 50))]] <- x3pListPlot(list(km1_residuals))
l
quantile(as.vector(km1_residuals$surface.matrix),seq(0,1,by = .1))
quantile(as.vector(km1_residuals$surface.matrix),seq(0,1,by = .1),na.rm = TRUE)
seq(0,1,by = .1)
quantile(as.vector(km1_residuals$surface.matrix),c(0.0,.025,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0),na.rm = TRUE)
library(cmcR)
library(magrittr)
library(ggplot2)
library(dplyr)
ind <- 1
for(high in seq(250,2000,by = 50)){
tmp <- km1_residuals
tmp$surface.matrix <- km1_residuals$surface.matrix  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = high,
filtertype = "hp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
tmp$header.info$sizeY <- ncol(tmp$surface.matrix)
tmp$header.info$sizeX <- nrow(tmp$surface.matrix)
l[[ind]] <- x3pListPlot(list(tmp))
ind <- ind + 1
}
l[[length(seq(250,2000,by = 50))]] <- x3pListPlot(list(km1_residuals))
l
l <- list()
ind <- 1
for(high in seq(250,2000,by = 50)){
tmp <- km1_residuals
tmp$surface.matrix <- km1_residuals$surface.matrix  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = high,
filtertype = "hp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
tmp$header.info$sizeY <- ncol(tmp$surface.matrix)
tmp$header.info$sizeX <- nrow(tmp$surface.matrix)
l[[ind]] <- x3pListPlot(list(tmp))
ind <- ind + 1
}
l[[length(seq(250,2000,by = 50))]] <- x3pListPlot(list(km1_residuals))
l
library(cmcR)
library(magrittr)
library(ggplot2)
library(dplyr)
l <- list()
ind <- 1
for(high in seq(250,1000,by = 50)){
tmp <- km1_residuals
tmp$surface.matrix <- km1_residuals$surface.matrix  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = high,
filtertype = "hp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
tmp$header.info$sizeY <- ncol(tmp$surface.matrix)
tmp$header.info$sizeX <- nrow(tmp$surface.matrix)
l[[ind]] <- x3pListPlot(list(tmp))
ind <- ind + 1
}
l[[length(seq(250,1000,by = 50))]] <- x3pListPlot(list(km1_residuals))
l
library(cmcR)
library(magrittr)
library(ggplot2)
library(dplyr)
l <- list()
ind <- 1
for(high in seq(250,1000,by = 50)){
tmp <- km1_residuals
tmp$surface.matrix <- km1_residuals$surface.matrix  %>%
preProcess_gaussFilter(res = km1_residuals$header.info$incrementY,
wavelength = high,
filtertype = "hp")
#this information needs to be updated manually if not using the
#selectBFImpression_ functions:
tmp$header.info$sizeY <- ncol(tmp$surface.matrix)
tmp$header.info$sizeX <- nrow(tmp$surface.matrix)
l[[ind]] <- x3pListPlot(list(tmp))
ind <- ind + 1
}
l[[length(seq(250,1000,by = 50))]] <- x3pListPlot(list(km1_residuals))
l
