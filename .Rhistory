colorScale1 <- scales::rescale(c(min(as.vector(.x), na.rm = TRUE),
max(as.vector(.x), na.rm = TRUE)))
colorScale1 <- c(colorScale1[1],0,colorScale1[2])
colorScale2 <- scales::rescale(c(min(as.vector(.y), na.rm = TRUE),
max(as.vector(.y), na.rm = TRUE)))
colorScale2 <- c(colorScale2[1],0,colorScale2[2])
p1 <- .x %>%
imager::as.cimg() %>%
as.data.frame() %>%
# mutate(x = x + floor(max(nrow(mat1),nrow(mat2))/4),
#        y = y + floor(max(ncol(mat1),ncol(mat2))/4)) %>%
ggplot2::ggplot(ggplot2::aes(x = x,y = y)) +
ggplot2::geom_raster(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradientn(values = colorScale1,
colours = c("black","grey50","white")) +
ggplot2::coord_fixed(xlim = c(0,max(nrow(.x),nrow(.y))),
ylim = c(0,max(ncol(.x),ncol(.y)))) +
ggplot2::theme_bw() +
ggplot2::theme(panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
legend.position = "none",
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank())
p2 <- .y %>%
imager::as.cimg() %>%
as.data.frame() %>%
# mutate(x = x + floor(max(nrow(mat1),nrow(mat2))/4),
#        y = y + floor(max(ncol(mat1),ncol(mat2))/4)) %>%
ggplot2::ggplot(ggplot2::aes(x = x,y = y)) +
ggplot2::geom_raster(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradientn(values = colorScale2,
colours = c("black","grey50","white")) +
ggplot2::coord_fixed(xlim = c(0,max(nrow(.x),nrow(.y))),
ylim = c(0,max(ncol(.x),ncol(.y)))) +
ggplot2::theme_bw() +
ggplot2::theme(panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
legend.position = "none",
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank())
return(list(p1,p2))
# ccfMapPlotp <- purrr::possibly(cmcR:::ccfMapPlot,otherwise = NA)
# ccfMapPlotp(mat1 = .x,mat2 = .y)
# plotp(imlist(as.cimgp(.x),as.cimg(.y)),layout = "row")
})
map2(flatten(mat1_split$surfaceMat_split)[2:3],
map(cmcR:::getMat2SplitLocations(mat1_split$cellIDs,cellSideLengths = mat1_split$cellSideLengths,mat2Dim = dim(dat2$surface.matrix)),
~ cmcR:::extractCellbyCornerLocs(cornerLocs = .,rotatedSurfaceMat = dat2$surface.matrix))[2:3],
function(.x,.y){
as.cimgp <- purrr::possibly(as.cimg,otherwise = NA)
plotp <- purrr::possibly(plot,otherwise = NA)
.x <- (.x - mean(.x,na.rm = TRUE))/sd(.x,na.rm = TRUE)
.y <- (.y - mean(.y,na.rm = TRUE))/sd(.y,na.rm = TRUE)
.x[is.na(.x)] <- 0
.y[is.na(.y)] <- 0
colorScale1 <- scales::rescale(c(min(as.vector(.x), na.rm = TRUE),
max(as.vector(.x), na.rm = TRUE)))
colorScale1 <- c(colorScale1[1],0,colorScale1[2])
colorScale2 <- scales::rescale(c(min(as.vector(.y), na.rm = TRUE),
max(as.vector(.y), na.rm = TRUE)))
colorScale2 <- c(colorScale2[1],0,colorScale2[2])
p1 <- .x %>%
imager::as.cimg() %>%
as.data.frame() %>%
# mutate(x = x + floor(max(nrow(mat1),nrow(mat2))/4),
#        y = y + floor(max(ncol(mat1),ncol(mat2))/4)) %>%
ggplot2::ggplot(ggplot2::aes(x = x,y = y)) +
ggplot2::geom_raster(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradient2(low = "grey0",
mid = "grey50",
high = "grey100") +
# ggplot2::scale_fill_gradientn(values = colorScale1,
#                               colours = c("black","grey50","white")) +
ggplot2::coord_fixed(xlim = c(0,max(nrow(.x),nrow(.y))),
ylim = c(0,max(ncol(.x),ncol(.y)))) +
ggplot2::theme_bw() +
ggplot2::theme(panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
legend.position = "none",
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank())
p2 <- .y %>%
imager::as.cimg() %>%
as.data.frame() %>%
# mutate(x = x + floor(max(nrow(mat1),nrow(mat2))/4),
#        y = y + floor(max(ncol(mat1),ncol(mat2))/4)) %>%
ggplot2::ggplot(ggplot2::aes(x = x,y = y)) +
ggplot2::geom_raster(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradient2(low = "grey0",
mid = "grey50",
high = "grey100") +
# ggplot2::scale_fill_gradientn(values = colorScale2,
#                               colours = c("black","grey50","white")) +
ggplot2::coord_fixed(xlim = c(0,max(nrow(.x),nrow(.y))),
ylim = c(0,max(ncol(.x),ncol(.y)))) +
ggplot2::theme_bw() +
ggplot2::theme(panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
legend.position = "none",
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank())
return(list(p1,p2))
# ccfMapPlotp <- purrr::possibly(cmcR:::ccfMapPlot,otherwise = NA)
# ccfMapPlotp(mat1 = .x,mat2 = .y)
# plotp(imlist(as.cimgp(.x),as.cimg(.y)),layout = "row")
})
map2(flatten(mat1_split$surfaceMat_split)[2:3],
map(cmcR:::getMat2SplitLocations(mat1_split$cellIDs,cellSideLengths = mat1_split$cellSideLengths,mat2Dim = dim(dat2$surface.matrix)),
~ cmcR:::extractCellbyCornerLocs(cornerLocs = .,rotatedSurfaceMat = dat2$surface.matrix))[2:3],
function(.x,.y){
as.cimgp <- purrr::possibly(as.cimg,otherwise = NA)
plotp <- purrr::possibly(plot,otherwise = NA)
.x <- (.x - mean(.x,na.rm = TRUE))/sd(.x,na.rm = TRUE)
.y <- (.y - mean(.y,na.rm = TRUE))/sd(.y,na.rm = TRUE)
.x[is.na(.x)] <- 0
.y[is.na(.y)] <- 0
colorScale1 <- scales::rescale(c(min(as.vector(.x), na.rm = TRUE),
max(as.vector(.x), na.rm = TRUE)))
colorScale1 <- c(colorScale1[1],0,colorScale1[2])
colorScale2 <- scales::rescale(c(min(as.vector(.y), na.rm = TRUE),
max(as.vector(.y), na.rm = TRUE)))
colorScale2 <- c(colorScale2[1],0,colorScale2[2])
p1 <- .x %>%
imager::as.cimg() %>%
as.data.frame() %>%
ggplot2::ggplot(ggplot2::aes(x = x,y = y)) +
ggplot2::geom_raster(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradient2(low = "grey0",
mid = "grey50",
high = "grey100") +
ggplot2::coord_fixed(xlim = c(0,max(nrow(.x),nrow(.y))),
ylim = c(0,max(ncol(.x),ncol(.y)))) +
ggplot2::theme_bw() +
ggplot2::theme(panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
legend.position = "none",
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank())
p2 <- .y %>%
imager::as.cimg() %>%
as.data.frame() %>%
ggplot2::ggplot(ggplot2::aes(x = x,y = y)) +
ggplot2::geom_raster(ggplot2::aes(fill = value)) +
ggplot2::scale_fill_gradient2(low = "grey0",
mid = "grey50",
high = "grey100") +
ggplot2::coord_fixed(xlim = c(0,max(nrow(.x),nrow(.y))),
ylim = c(0,max(ncol(.x),ncol(.y)))) +
ggplot2::theme_bw() +
ggplot2::theme(panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
legend.position = "none",
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank())
# return(list(p1,p2))
ccfMapPlotp <- purrr::possibly(cmcR:::ccfMapPlot,otherwise = NA)
ccfMapPlotp(mat1 = .x,mat2 = .y)
# plotp(imlist(as.cimgp(.x),as.cimg(.y)),layout = "row")
})
map2(flatten(mat1_split$surfaceMat_split)[2:3],
map(cmcR:::getMat2SplitLocations(mat1_split$cellIDs,cellSideLengths = mat1_split$cellSideLengths,mat2Dim = dim(dat2$surface.matrix)),
~ cmcR:::extractCellbyCornerLocs(cornerLocs = .,rotatedSurfaceMat = dat2$surface.matrix))[2:3],
function(.x,.y){
as.cimgp <- purrr::possibly(as.cimg,otherwise = NA)
plotp <- purrr::possibly(plot,otherwise = NA)
# .x <- (.x - mean(.x,na.rm = TRUE))/sd(.x,na.rm = TRUE)
# .y <- (.y - mean(.y,na.rm = TRUE))/sd(.y,na.rm = TRUE)
.x[is.na(.x)] <- 0
.y[is.na(.y)] <- 0
# colorScale1 <- scales::rescale(c(min(as.vector(.x), na.rm = TRUE),
#                                 max(as.vector(.x), na.rm = TRUE)))
# colorScale1 <- c(colorScale1[1],0,colorScale1[2])
#
# colorScale2 <- scales::rescale(c(min(as.vector(.y), na.rm = TRUE),
#                                 max(as.vector(.y), na.rm = TRUE)))
# colorScale2 <- c(colorScale2[1],0,colorScale2[2])
#
#
# p1 <- .x %>%
#   imager::as.cimg() %>%
#   as.data.frame() %>%
#   ggplot2::ggplot(ggplot2::aes(x = x,y = y)) +
#   ggplot2::geom_raster(ggplot2::aes(fill = value)) +
#   ggplot2::scale_fill_gradient2(low = "grey0",
#                                 mid = "grey50",
#                                 high = "grey100") +
#   ggplot2::coord_fixed(xlim = c(0,max(nrow(.x),nrow(.y))),
#                        ylim = c(0,max(ncol(.x),ncol(.y)))) +
#   ggplot2::theme_bw() +
#   ggplot2::theme(panel.grid.major = ggplot2::element_blank(),
#                  panel.grid.minor = ggplot2::element_blank(),
#                  legend.position = "none",
#                  axis.title.x = ggplot2::element_blank(),
#                  axis.title.y = ggplot2::element_blank())
#
# p2 <- .y %>%
#   imager::as.cimg() %>%
#   as.data.frame() %>%
#   ggplot2::ggplot(ggplot2::aes(x = x,y = y)) +
#   ggplot2::geom_raster(ggplot2::aes(fill = value)) +
#   ggplot2::scale_fill_gradient2(low = "grey0",
#                                 mid = "grey50",
#                                 high = "grey100") +
#   ggplot2::coord_fixed(xlim = c(0,max(nrow(.x),nrow(.y))),
#                        ylim = c(0,max(ncol(.x),ncol(.y)))) +
#   ggplot2::theme_bw() +
#   ggplot2::theme(panel.grid.major = ggplot2::element_blank(),
#                  panel.grid.minor = ggplot2::element_blank(),
#                  legend.position = "none",
#                  axis.title.x = ggplot2::element_blank(),
#                  axis.title.y = ggplot2::element_blank())
# return(list(p1,p2))
ccfMapPlotp <- purrr::possibly(cmcR:::ccfMapPlot,otherwise = NA)
ccfMapPlotp(mat1 = .x,mat2 = .y)
# plotp(imlist(as.cimgp(.x),as.cimg(.y)),layout = "row")
})
map2(flatten(mat1_split$surfaceMat_split)[2:3],
map(cmcR:::getMat2SplitLocations(mat1_split$cellIDs,cellSideLengths = mat1_split$cellSideLengths,mat2Dim = dim(dat2$surface.matrix)),
~ cmcR:::extractCellbyCornerLocs(cornerLocs = .,rotatedSurfaceMat = dat2$surface.matrix))[2:3],
function(.x,.y){
as.cimgp <- purrr::possibly(as.cimg,otherwise = NA)
plotp <- purrr::possibly(plot,otherwise = NA)
.x <- (.x - mean(.x,na.rm = TRUE))/sd(.x,na.rm = TRUE)
.y <- (.y - mean(.y,na.rm = TRUE))/sd(.y,na.rm = TRUE)
.x[is.na(.x)] <- 0
.y[is.na(.y)] <- 0
# colorScale1 <- scales::rescale(c(min(as.vector(.x), na.rm = TRUE),
#                                 max(as.vector(.x), na.rm = TRUE)))
# colorScale1 <- c(colorScale1[1],0,colorScale1[2])
#
# colorScale2 <- scales::rescale(c(min(as.vector(.y), na.rm = TRUE),
#                                 max(as.vector(.y), na.rm = TRUE)))
# colorScale2 <- c(colorScale2[1],0,colorScale2[2])
#
#
# p1 <- .x %>%
#   imager::as.cimg() %>%
#   as.data.frame() %>%
#   ggplot2::ggplot(ggplot2::aes(x = x,y = y)) +
#   ggplot2::geom_raster(ggplot2::aes(fill = value)) +
#   ggplot2::scale_fill_gradient2(low = "grey0",
#                                 mid = "grey50",
#                                 high = "grey100") +
#   ggplot2::coord_fixed(xlim = c(0,max(nrow(.x),nrow(.y))),
#                        ylim = c(0,max(ncol(.x),ncol(.y)))) +
#   ggplot2::theme_bw() +
#   ggplot2::theme(panel.grid.major = ggplot2::element_blank(),
#                  panel.grid.minor = ggplot2::element_blank(),
#                  legend.position = "none",
#                  axis.title.x = ggplot2::element_blank(),
#                  axis.title.y = ggplot2::element_blank())
#
# p2 <- .y %>%
#   imager::as.cimg() %>%
#   as.data.frame() %>%
#   ggplot2::ggplot(ggplot2::aes(x = x,y = y)) +
#   ggplot2::geom_raster(ggplot2::aes(fill = value)) +
#   ggplot2::scale_fill_gradient2(low = "grey0",
#                                 mid = "grey50",
#                                 high = "grey100") +
#   ggplot2::coord_fixed(xlim = c(0,max(nrow(.x),nrow(.y))),
#                        ylim = c(0,max(ncol(.x),ncol(.y)))) +
#   ggplot2::theme_bw() +
#   ggplot2::theme(panel.grid.major = ggplot2::element_blank(),
#                  panel.grid.minor = ggplot2::element_blank(),
#                  legend.position = "none",
#                  axis.title.x = ggplot2::element_blank(),
#                  axis.title.y = ggplot2::element_blank())
# return(list(p1,p2))
ccfMapPlotp <- purrr::possibly(cmcR:::ccfMapPlot,otherwise = NA)
ccfMapPlotp(mat1 = .x,mat2 = .y)
# plotp(imlist(as.cimgp(.x),as.cimg(.y)),layout = "row")
})
map2(flatten(mat1_split$surfaceMat_split)[2:3],
map(cmcR:::getMat2SplitLocations(mat1_split$cellIDs,cellSideLengths = mat1_split$cellSideLengths,mat2Dim = dim(dat2$surface.matrix)),
~ cmcR:::extractCellbyCornerLocs(cornerLocs = .,rotatedSurfaceMat = dat2$surface.matrix))[2:3],
function(.x,.y){
as.cimgp <- purrr::possibly(as.cimg,otherwise = NA)
plotp <- purrr::possibly(plot,otherwise = NA)
# .x <- (.x - mean(.x,na.rm = TRUE))/sd(.x,na.rm = TRUE)
# .y <- (.y - mean(.y,na.rm = TRUE))/sd(.y,na.rm = TRUE)
.x[is.na(.x)] <- 0
.y[is.na(.y)] <- 0
# colorScale1 <- scales::rescale(c(min(as.vector(.x), na.rm = TRUE),
#                                 max(as.vector(.x), na.rm = TRUE)))
# colorScale1 <- c(colorScale1[1],0,colorScale1[2])
#
# colorScale2 <- scales::rescale(c(min(as.vector(.y), na.rm = TRUE),
#                                 max(as.vector(.y), na.rm = TRUE)))
# colorScale2 <- c(colorScale2[1],0,colorScale2[2])
#
#
# p1 <- .x %>%
#   imager::as.cimg() %>%
#   as.data.frame() %>%
#   ggplot2::ggplot(ggplot2::aes(x = x,y = y)) +
#   ggplot2::geom_raster(ggplot2::aes(fill = value)) +
#   ggplot2::scale_fill_gradient2(low = "grey0",
#                                 mid = "grey50",
#                                 high = "grey100") +
#   ggplot2::coord_fixed(xlim = c(0,max(nrow(.x),nrow(.y))),
#                        ylim = c(0,max(ncol(.x),ncol(.y)))) +
#   ggplot2::theme_bw() +
#   ggplot2::theme(panel.grid.major = ggplot2::element_blank(),
#                  panel.grid.minor = ggplot2::element_blank(),
#                  legend.position = "none",
#                  axis.title.x = ggplot2::element_blank(),
#                  axis.title.y = ggplot2::element_blank())
#
# p2 <- .y %>%
#   imager::as.cimg() %>%
#   as.data.frame() %>%
#   ggplot2::ggplot(ggplot2::aes(x = x,y = y)) +
#   ggplot2::geom_raster(ggplot2::aes(fill = value)) +
#   ggplot2::scale_fill_gradient2(low = "grey0",
#                                 mid = "grey50",
#                                 high = "grey100") +
#   ggplot2::coord_fixed(xlim = c(0,max(nrow(.x),nrow(.y))),
#                        ylim = c(0,max(ncol(.x),ncol(.y)))) +
#   ggplot2::theme_bw() +
#   ggplot2::theme(panel.grid.major = ggplot2::element_blank(),
#                  panel.grid.minor = ggplot2::element_blank(),
#                  legend.position = "none",
#                  axis.title.x = ggplot2::element_blank(),
#                  axis.title.y = ggplot2::element_blank())
# return(list(p1,p2))
ccfMapPlotp <- purrr::possibly(cmcR:::ccfMapPlot,otherwise = NA)
ccfMapPlotp(mat1 = .x,mat2 = .y)
# plotp(imlist(as.cimgp(.x),as.cimg(.y)),layout = "row")
})
s
map2(flatten(mat1_split$surfaceMat_split),
map(cmcR:::getMat2SplitLocations(mat1_split$cellIDs,cellSideLengths = mat1_split$cellSideLengths,mat2Dim = dim(dat2$surface.matrix)),
~ cmcR:::extractCellbyCornerLocs(cornerLocs = .,rotatedSurfaceMat = dat2$surface.matrix)),
function(.x,.y){
as.cimgp <- purrr::possibly(as.cimg,otherwise = NA)
plotp <- purrr::possibly(plot,otherwise = NA)
.x <- (.x - mean(.x,na.rm = TRUE))/sd(.x,na.rm = TRUE)
.y <- (.y - mean(.y,na.rm = TRUE))/sd(.y,na.rm = TRUE)
.x[is.na(.x)] <- 0
.y[is.na(.y)] <- 0
# colorScale1 <- scales::rescale(c(min(as.vector(.x), na.rm = TRUE),
#                                 max(as.vector(.x), na.rm = TRUE)))
# colorScale1 <- c(colorScale1[1],0,colorScale1[2])
#
# colorScale2 <- scales::rescale(c(min(as.vector(.y), na.rm = TRUE),
#                                 max(as.vector(.y), na.rm = TRUE)))
# colorScale2 <- c(colorScale2[1],0,colorScale2[2])
#
#
# p1 <- .x %>%
#   imager::as.cimg() %>%
#   as.data.frame() %>%
#   ggplot2::ggplot(ggplot2::aes(x = x,y = y)) +
#   ggplot2::geom_raster(ggplot2::aes(fill = value)) +
#   ggplot2::scale_fill_gradient2(low = "grey0",
#                                 mid = "grey50",
#                                 high = "grey100") +
#   ggplot2::coord_fixed(xlim = c(0,max(nrow(.x),nrow(.y))),
#                        ylim = c(0,max(ncol(.x),ncol(.y)))) +
#   ggplot2::theme_bw() +
#   ggplot2::theme(panel.grid.major = ggplot2::element_blank(),
#                  panel.grid.minor = ggplot2::element_blank(),
#                  legend.position = "none",
#                  axis.title.x = ggplot2::element_blank(),
#                  axis.title.y = ggplot2::element_blank())
#
# p2 <- .y %>%
#   imager::as.cimg() %>%
#   as.data.frame() %>%
#   ggplot2::ggplot(ggplot2::aes(x = x,y = y)) +
#   ggplot2::geom_raster(ggplot2::aes(fill = value)) +
#   ggplot2::scale_fill_gradient2(low = "grey0",
#                                 mid = "grey50",
#                                 high = "grey100") +
#   ggplot2::coord_fixed(xlim = c(0,max(nrow(.x),nrow(.y))),
#                        ylim = c(0,max(ncol(.x),ncol(.y)))) +
#   ggplot2::theme_bw() +
#   ggplot2::theme(panel.grid.major = ggplot2::element_blank(),
#                  panel.grid.minor = ggplot2::element_blank(),
#                  legend.position = "none",
#                  axis.title.x = ggplot2::element_blank(),
#                  axis.title.y = ggplot2::element_blank())
# return(list(p1,p2))
ccfMapPlotp <- purrr::possibly(cmcR:::ccfMapPlot,otherwise = NA)
ccfMapPlotp(mat1 = .x,mat2 = .y)
# plotp(imlist(as.cimgp(.x),as.cimg(.y)),layout = "row")
})
dat3$ccfResults %>% topResultsPerCell()
dat3 <- cmcR::cellCCF(dat1$surface.matrix,
dat2$surface.matrix,
thetas = seq(-30,30,by = 3),
horizSplits = 8,
vertSplits = 8,
centerCell = "wholeMatrix",
scaleCell = NULL)
missing(NULL)
missing(x)
missing(y)
?missing
dat3$ccfResults %>% topResultsPerCell()
dat3 <- cmcR::cellCCF(dat1$surface.matrix,
dat2$surface.matrix,
thetas = seq(-30,30,by = 3),
horizSplits = 8,
vertSplits = 8,
centerCell = "wholeMatrix",
scaleCell = NULL)
dat3 <- cmcR::cellCCF(dat1$surface.matrix,
dat2$surface.matrix,
thetas = seq(-30,30,by = 3),
horizSplits = 8,
vertSplits = 8,
centerCell = "wholeMatrix",
scaleCell = NULL)
dat3$ccfResults %>% topResultsPerCell()
dat3 <- cmcR::cellCCF(dat1$surface.matrix,
dat2$surface.matrix,
thetas = seq(-30,30,by = 3),
horizSplits = 8,
vertSplits = 8,
centerCell = "wholeMatrix")
dat3 <- cmcR::cellCCF(dat1$surface.matrix,
dat2$surface.matrix,
thetas = seq(-30,30,by = 3),
horizSplits = 8,
vertSplits = 8,
centerCell = "wholeMatrix")
dat3$ccfResults %>% topResultsPerCell()
dat1$surface.matrix %>% dim()
dat2$surface.matrix %>% dim()
devtools::docuas.package()
devtools::document()
?cellCCF()
map2(c(1,2,3),1,~ .x + .y)
map2(c(1,2,3),c(1,2),~ .x + .y)
dat3$ccfResults %>% topResultsPerCell()
dat3$ccfResults %>% topResultsPerCell() %>% ggplot(aes(x = corr)) + geom_histogram()
dat3$ccfResults %>% topResultsPerCell()$corr
dat3$ccfResults %>% topResultsPerCell() %>% .$corr
dat3 <- cmcR::cellCCF(dat1$surface.matrix,
dat2$surface.matrix,
thetas = seq(-30,30,by = 3),
horizSplits = 8,
vertSplits = 8,
centerCell = "wholeMatrix")
dat3$params
dat3$ccfResults %>% cmcR:::topResultsPerCell()
dat3$ccfResults %>% cmcR:::topResultsPerCell() %>% ggplot(aes(x = corr)) + geom_histogram()
dat3$ccfResults %>% cmcR:::countInitialCMCs()
dat3$ccfResults %>% .$theta
dat3$ccfResults %>% cmcR::topResultsPerCell() %>% .$theta
dat3$ccfResults %>% cmcR::topResultsPerCell() %>% ggplot(aes(x = theta)) + geom_histogram()
dat3$ccfResults %>% cmcR::topResultsPerCell() %>% .$theta %>% median()
cmcR::compareBFs_bothDirections(dat1,dat2)
dat3$ccfResults %>% cmcR:::countInitialCMCs(consensus_function = cmcR:::getMode)
Mode
dat3 <- cmcR::cellCCF(dat1$surface.matrix,
dat2$surface.matrix,
thetas = seq(-30,30,by = 3),
horizSplits = 8,
vertSplits = 8,
centerCell = "wholeMatrix")
dat3$params
cmcR:::getHighCCFPairs(dat1,dat2,dat3)
cmcR:::getHighCCFPairs(dat1,dat2,dat3)
cmcR:::getHighCCFPairs(dat1,dat2,dat3)
dat3$ccfResults %>% cmcR::topResultsPerCell()
cmcR:::getHighCCFPairs(dat1,dat2,dat3)$highCCFPairs %>%
purrr::map(~ plot(imager::imlist(imager::as.cimg(.[[1]]),
imager::as.cimg(t(.[[2]]))),
layout = "row"))
cmcR:::getHighCCFPairs(dat1,dat2,dat3)$highCCFPairs %>%
purrr::map(~ plot(imager::imlist(imager::as.cimg(.[[1]]),
imager::as.cimg(.[[2]])),
layout = "row"))
cmcR:::getHighCCFPairs(dat1,dat2,dat3)$highCCFPairs[1] %>%
purrr::map(function(pair){
x <- pair[[1]]
y <- pair[[2]]
x[is.na(x)] <- 0
y[is.na(y)] <- 0
ccfMapPlot(mat1 = x,mat2 = y)
# plot(imager::imlist(imager::as.cimg(.[[1]]),
#                     imager::as.cimg(.[[2]])),
# layout = "row")
}
)
cmcR:::getHighCCFPairs(dat1,dat2,dat3)$highCCFPairs[1] %>%
purrr::map(function(pair){
x <- pair[[1]]
y <- pair[[2]]
x[is.na(x)] <- 0
y[is.na(y)] <- 0
cmcR:::ccfMapPlot(mat1 = x,mat2 = y)
# plot(imager::imlist(imager::as.cimg(.[[1]]),
#                     imager::as.cimg(.[[2]])),
# layout = "row")
}
)
cmcR:::getHighCCFPairs(dat1,dat2,dat3)$highCCFPairs %>%
purrr::map(function(pair){
x <- pair[[1]]
y <- pair[[2]]
x[is.na(x)] <- 0
y[is.na(y)] <- 0
cmcR:::ccfMapPlot(mat1 = x,mat2 = y)
# plot(imager::imlist(imager::as.cimg(.[[1]]),
#                     imager::as.cimg(.[[2]])),
# layout = "row")
}
)
